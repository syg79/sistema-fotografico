# Workflow para deploy automático no GitHub Pages
name: Deploy GitHub Pages

# Triggers do workflow
on:
  # Executa no push para a branch main
  push:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - '.github/workflows/deploy-github-pages.yml'
  
  # Executa em pull requests para a branch main
  pull_request:
    branches: [ main, master ]
    paths:
      - 'docs/**'
  
  # Permite execução manual
  workflow_dispatch:

# Configurações de permissões
permissions:
  contents: read
  pages: write
  id-token: write

# Configuração de concorrência
concurrency:
  group: "pages"
  cancel-in-progress: false

# Jobs do workflow
jobs:
  # Job de build
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Instalar dependências
      run: |
        cd docs
        npm init -y
        npm install --save-dev htmlhint stylelint eslint
    
    - name: Validar HTML
      run: |
        cd docs
        npx htmlhint "**/*.html" --config .htmlhintrc || true
    
    - name: Validar CSS
      run: |
        cd docs
        npx stylelint "assets/css/**/*.css" --config .stylelintrc.json || true
    
    - name: Validar JavaScript
      run: |
        cd docs
        npx eslint "assets/js/**/*.js" --config .eslintrc.json || true
    
    - name: Configurar Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        working-directory: docs
    
    - name: Instalar Jekyll e dependências
      run: |
        cd docs
        gem install jekyll bundler
        bundle init
        echo 'gem "jekyll", "~> 4.3"' >> Gemfile
        echo 'gem "minima", "~> 2.5"' >> Gemfile
        echo 'gem "jekyll-feed", "~> 0.12"' >> Gemfile
        echo 'gem "jekyll-sitemap", "~> 1.4"' >> Gemfile
        echo 'gem "jekyll-seo-tag", "~> 2.8"' >> Gemfile
        bundle install
    
    - name: Configurar GitHub Pages
      id: pages
      uses: actions/configure-pages@v4
    
    - name: Build com Jekyll
      run: |
        cd docs
        bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
      env:
        JEKYLL_ENV: production
    
    - name: Verificar arquivos gerados
      run: |
        cd docs
        ls -la _site/
        echo "Arquivos HTML encontrados:"
        find _site/ -name "*.html" -type f
    
    - name: Upload dos artefatos
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/_site

  # Job de deploy (apenas na branch main/master)
  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy para GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Notificar sucesso
      run: |
        echo "✅ Deploy realizado com sucesso!"
        echo "🌐 Site disponível em: ${{ steps.deployment.outputs.page_url }}"

  # Job de testes (executa sempre)
  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v4
    
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Baixar artefatos do build
      uses: actions/download-artifact@v4
      with:
        name: github-pages
        path: ./site
    
    - name: Extrair arquivos do site
      run: |
        cd site
        tar -xf artifact.tar
        ls -la
    
    - name: Instalar dependências de teste
      run: |
        npm install --global lighthouse-ci@latest
        npm install --global pa11y
    
    - name: Servir site localmente
      run: |
        cd site
        python3 -m http.server 8080 &
        sleep 5
      
    - name: Testes de acessibilidade
      run: |
        pa11y http://localhost:8080 --reporter cli || true
        pa11y http://localhost:8080/fotografos/agenda.html --reporter cli || true
        pa11y http://localhost:8080/editores/trabalhos.html --reporter cli || true
        pa11y http://localhost:8080/conferencia/dashboard.html --reporter cli || true
    
    - name: Testes de performance (Lighthouse)
      run: |
        lhci autorun --upload.target=temporary-public-storage --collect.url=http://localhost:8080 || true
    
    - name: Verificar links internos
      run: |
        cd site
        find . -name "*.html" -exec grep -l "href=" {} \; | head -5 | while read file; do
          echo "Verificando links em: $file"
          grep -o 'href="[^"]*"' "$file" | head -3 || true
        done

  # Job de notificação (opcional)
  notify:
    if: always()
    runs-on: ubuntu-latest
    needs: [build, deploy, test]
    
    steps:
    - name: Notificar resultado
      run: |
        if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 Deploy do GitHub Pages concluído com sucesso!"
          echo "📊 Testes executados: ${{ needs.test.result }}"
        else
          echo "❌ Falha no deploy do GitHub Pages"
          echo "🔍 Build: ${{ needs.build.result }}"
          echo "🚀 Deploy: ${{ needs.deploy.result }}"
          echo "🧪 Testes: ${{ needs.test.result }}"
        fi