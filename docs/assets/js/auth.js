/**
 * Sistema de Autentica√ß√£o
 * Gerencia login, roles e permiss√µes para o sistema fotogr√°fico
 */

class AuthManager {
    constructor() {
        this.currentUser = null;
        this.userRole = null;
        this.isAuthenticated = false;
        this.sessionKey = 'sistema_foto_session';
        
        // Carregar sess√£o existente
        this.loadSession();
        
        console.log('üîê AuthManager inicializado');
    }

    /**
     * Realiza login do usu√°rio
     * @param {string} email - Email do usu√°rio
     * @param {string} password - Senha do usu√°rio
     * @returns {Promise<Object|null>} Dados do usu√°rio ou null se falhou
     */
    async login(email, password) {
        try {
            console.log('üîë Tentando fazer login:', email);
            
            const user = await this.validateUser(email, password);
            
            if (user) {
                this.currentUser = user;
                this.userRole = user.role;
                this.isAuthenticated = true;
                
                // Salvar sess√£o
                this.saveSession(user);
                
                console.log('‚úÖ Login realizado com sucesso:', user.nome, `(${user.role})`);
                
                // Redirecionar para interface apropriada
                if (CONFIG.AUTH.REDIRECT_AFTER_LOGIN) {
                    this.redirectToUserInterface();
                }
                
                return user;
            } else {
                console.warn('‚ùå Credenciais inv√°lidas');
                return null;
            }
        } catch (error) {
            console.error('‚ùå Erro no login:', error);
            throw error;
        }
    }

    /**
     * Valida credenciais do usu√°rio
     * @param {string} email - Email do usu√°rio
     * @param {string} password - Senha do usu√°rio
     * @returns {Promise<Object|null>}
     */
    async validateUser(email, password) {
        // Em desenvolvimento, permitir bypass da autentica√ß√£o
        if (CONFIG.DEV.BYPASS_AUTH) {
            console.log('üîß Bypass de autentica√ß√£o ativado (desenvolvimento)');
            return {
                id: 'dev_user',
                nome: 'Usu√°rio de Desenvolvimento',
                email: email,
                role: 'admin'
            };
        }

        try {
            // Carregar usu√°rios autorizados do Google Sheets
            const authorizedUsers = await this.loadAuthorizedUsers();
            
            // Buscar usu√°rio por email e senha
            const user = authorizedUsers.find(u => 
                u.email.toLowerCase() === email.toLowerCase() && 
                u.senha === password
            );
            
            return user || null;
        } catch (error) {
            console.error('‚ùå Erro ao validar usu√°rio:', error);
            
            // Fallback: lista de usu√°rios hardcoded para emerg√™ncia
            return this.validateUserFallback(email, password);
        }
    }

    /**
     * Carrega usu√°rios autorizados do Google Sheets
     * @returns {Promise<Array>}
     */
    async loadAuthorizedUsers() {
        try {
            // Tentar carregar da aba "Configuracao" ou "Usuarios"
            const configData = await window.googleSheetsAPI.loadSheetData('Configuracao');
            
            // Filtrar apenas registros de usu√°rios
            const users = configData.filter(item => item.tipo === 'usuario' || item.Tipo === 'usuario');
            
            return users.map(user => ({
                id: user.id || user.ID,
                nome: user.nome || user.Nome,
                email: user.email || user.Email,
                senha: user.senha || user.Senha,
                role: user.role || user.Role || 'fotografo'
            }));
        } catch (error) {
            console.warn('‚ö†Ô∏è N√£o foi poss√≠vel carregar usu√°rios do Google Sheets:', error);
            throw error;
        }
    }

    /**
     * Valida√ß√£o de usu√°rio com lista hardcoded (fallback)
     * @param {string} email 
     * @param {string} password 
     * @returns {Object|null}
     */
    validateUserFallback(email, password) {
        console.log('üîß Usando valida√ß√£o de fallback');
        
        // Lista de usu√°rios de emerg√™ncia
        const fallbackUsers = [
            {
                id: 'admin',
                nome: 'Administrador',
                email: 'admin@sistema.com',
                senha: 'admin123',
                role: 'admin'
            },
            {
                id: 'gestor',
                nome: 'Gestor',
                email: 'gestor@sistema.com',
                senha: 'gestor123',
                role: 'gestor'
            },
            {
                id: 'fotografo1',
                nome: 'Fot√≥grafo Teste',
                email: 'fotografo@sistema.com',
                senha: 'foto123',
                role: 'fotografo'
            },
            {
                id: 'editor1',
                nome: 'Editor Teste',
                email: 'editor@sistema.com',
                senha: 'edit123',
                role: 'editor'
            }
        ];

        return fallbackUsers.find(u => 
            u.email.toLowerCase() === email.toLowerCase() && 
            u.senha === password
        ) || null;
    }

    /**
     * Realiza logout do usu√°rio
     */
    logout() {
        this.currentUser = null;
        this.userRole = null;
        this.isAuthenticated = false;
        
        // Limpar sess√£o
        localStorage.removeItem(this.sessionKey);
        sessionStorage.removeItem(this.sessionKey);
        
        console.log('üëã Logout realizado');
        
        // Redirecionar para p√°gina de login
        window.location.href = 'login.html';
    }

    /**
     * Verifica se o usu√°rio tem permiss√£o para acessar um recurso
     * @param {string} requiredRole - Role m√≠nimo necess√°rio
     * @returns {boolean}
     */
    checkPermission(requiredRole) {
        if (!CONFIG.AUTH.ENABLED) {
            return true; // Autentica√ß√£o desabilitada
        }

        if (!this.isAuthenticated) {
            console.warn('‚ùå Usu√°rio n√£o autenticado');
            this.redirectToLogin();
            return false;
        }

        const userLevel = CONFIG.AUTH.ROLE_HIERARCHY[this.userRole] || 0;
        const requiredLevel = CONFIG.AUTH.ROLE_HIERARCHY[requiredRole] || 0;

        const hasPermission = userLevel >= requiredLevel;
        
        if (!hasPermission) {
            console.warn(`‚ùå Permiss√£o negada. Usu√°rio: ${this.userRole} (${userLevel}), Necess√°rio: ${requiredRole} (${requiredLevel})`);
        }

        return hasPermission;
    }

    /**
     * Redireciona para a interface apropriada do usu√°rio
     */
    redirectToUserInterface() {
        if (!this.isAuthenticated) {
            this.redirectToLogin();
            return;
        }

        let targetUrl = 'index.html'; // Padr√£o

        switch (this.userRole) {
            case CONFIG.AUTH.ROLES.FOTOGRAFO:
                targetUrl = 'fotografos/agenda.html';
                break;
            case CONFIG.AUTH.ROLES.EDITOR:
                targetUrl = 'editores/trabalhos.html';
                break;
            case CONFIG.AUTH.ROLES.GESTOR:
            case CONFIG.AUTH.ROLES.ADMIN:
                targetUrl = 'conferencia/dashboard.html';
                break;
        }

        console.log(`üîÑ Redirecionando para: ${targetUrl}`);
        window.location.href = targetUrl;
    }

    /**
     * Redireciona para p√°gina de login
     */
    redirectToLogin() {
        if (window.location.pathname !== '/login.html' && !window.location.pathname.endsWith('login.html')) {
            console.log('üîÑ Redirecionando para login');
            window.location.href = 'login.html';
        }
    }

    /**
     * Salva sess√£o do usu√°rio
     * @param {Object} user - Dados do usu√°rio
     */
    saveSession(user) {
        const sessionData = {
            user: user,
            timestamp: Date.now(),
            expires: Date.now() + CONFIG.AUTH.SESSION_TIMEOUT
        };

        try {
            localStorage.setItem(this.sessionKey, JSON.stringify(sessionData));
            console.log('üíæ Sess√£o salva');
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao salvar sess√£o:', error);
        }
    }

    /**
     * Carrega sess√£o existente
     */
    loadSession() {
        try {
            const sessionData = localStorage.getItem(this.sessionKey);
            
            if (!sessionData) {
                return false;
            }

            const session = JSON.parse(sessionData);
            
            // Verificar se a sess√£o n√£o expirou
            if (Date.now() > session.expires) {
                console.log('‚è∞ Sess√£o expirada');
                localStorage.removeItem(this.sessionKey);
                return false;
            }

            // Restaurar usu√°rio
            this.currentUser = session.user;
            this.userRole = session.user.role;
            this.isAuthenticated = true;

            console.log('‚úÖ Sess√£o restaurada:', session.user.nome);
            return true;
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao carregar sess√£o:', error);
            localStorage.removeItem(this.sessionKey);
            return false;
        }
    }

    /**
     * Verifica se a sess√£o ainda √© v√°lida
     * @returns {boolean}
     */
    isSessionValid() {
        if (!this.isAuthenticated) {
            return false;
        }

        try {
            const sessionData = localStorage.getItem(this.sessionKey);
            if (!sessionData) {
                return false;
            }

            const session = JSON.parse(sessionData);
            return Date.now() < session.expires;
        } catch (error) {
            return false;
        }
    }

    /**
     * Renova a sess√£o atual
     */
    renewSession() {
        if (this.isAuthenticated && this.currentUser) {
            this.saveSession(this.currentUser);
            console.log('üîÑ Sess√£o renovada');
        }
    }

    /**
     * Obt√©m informa√ß√µes do usu√°rio atual
     * @returns {Object|null}
     */
    getCurrentUser() {
        return this.isAuthenticated ? this.currentUser : null;
    }

    /**
     * Obt√©m role do usu√°rio atual
     * @returns {string|null}
     */
    getCurrentRole() {
        return this.isAuthenticated ? this.userRole : null;
    }

    /**
     * Verifica se o usu√°rio √© admin
     * @returns {boolean}
     */
    isAdmin() {
        return this.userRole === CONFIG.AUTH.ROLES.ADMIN;
    }

    /**
     * Verifica se o usu√°rio √© gestor ou superior
     * @returns {boolean}
     */
    isManager() {
        return this.checkPermission(CONFIG.AUTH.ROLES.GESTOR);
    }
}

// Middleware para proteger p√°ginas
function requireAuth(requiredRole = 'fotografo') {
    if (!window.authManager) {
        window.authManager = new AuthManager();
    }

    if (!window.authManager.checkPermission(requiredRole)) {
        return false;
    }

    // Renovar sess√£o se necess√°rio
    window.authManager.renewSession();
    return true;
}

// Inicializa√ß√£o autom√°tica
document.addEventListener('DOMContentLoaded', () => {
    if (!window.authManager) {
        window.authManager = new AuthManager();
        console.log('üöÄ AuthManager pronto para uso');
    }
});

// Exportar para uso em m√≥dulos
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { AuthManager, requireAuth };
}